swagger: "2.0"
info:
  description: "This is the API documentation for PSAS - Peer Skills Assessment System.  You can find out more about PSAS at [https://psas.mybluemix.net](https://psas.mybluemix.net). To access the API, you need to authorize using a bearer token from PSAS website."
  version: "1.0.0"
  title: "PSAS API"
  termsOfService: "http://psas.mybluemix.net/privacy"
  contact:
    email: "psas@udesc.br"
host: "61914044.us-south.apiconnect.appdomain.cloud"
basePath: "/psas/v1"
schemes:
- "https"
paths:
  /organization:
    post:
      tags:
      - "organization"
      summary: "Add a new organization"
      description: ""
      operationId: "addOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Organization object that needs to be added to the PSAS"
        required: true
        schema:
          $ref: "#/definitions/organization"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
      - authorization: []
    get:
      tags:
      - "organization"
      summary: "Find all organizations from user"
      operationId: "findOrganizationsFromUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/organization"
        400:
          description: "Invalid status value"
      security:
      - authorization: []
  /organization/{organizationId}:
    get:
      tags:
      - "organization"
      summary: "Find organization by Id"
      description: "Returns a single organization"
      operationId: "findOrganizationById"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Id of organization to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/organization"
        400:
          description: "Invalid Id supplied"
        404:
          description: "Organization not found"
      security:
      - authorization: []
    put:
        tags:
        - "organization"
        summary: "Updates an organization"
        description: ""
        operationId: "updateOrganization"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "organizationId"
          in: "path"
          description: "Id of organization to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/organization"
        responses:
          405:
            description: "Invalid input"
        security:
        - authorization: []
    delete:
      tags:
      - "organization"
      summary: "Deletes an organization"
      description: ""
      operationId: "deleteOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Organization not found"
      security:
      - authorization: []
  /project:
    post:
      tags:
      - "project"
      summary: "Add a new project"
      description: ""
      operationId: "addProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be added to the PSAS"
        required: true
        schema:
          $ref: "#/definitions/project"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
      - authorization: []
    get:
      tags:
      - "project"
      summary: "Find all project from user"
      operationId: "findProjectsFromUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/project"
        400:
          description: "Invalid status value"
      security:
      - authorization: []
  /project/findByOrganizationId/{organizationId}:
    get:
      tags:
      - "project"
      summary: "Find project by organization id"
      description: "Returns all project from an organization"
      operationId: "findProjectsByOrganizationId"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Id of organization to find projects"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/project"
        400:
          description: "Invalid id supplied"
        404:
          description: "Organization not found"
      security:
      - authorization: []
  /project/{projectId}:
    get:
      tags:
      - "project"
      summary: "Find project by Id"
      description: "Returns a single project"
      operationId: "findProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Id of project to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/project"
        400:
          description: "Invalid id supplied"
        404:
          description: "Project not found"
      security:
      - authorization: []
    put:
        tags:
        - "project"
        summary: "Updates a project"
        description: ""
        operationId: "updateProject"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "projectId"
          in: "path"
          description: "Id of project to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/project"
        responses:
          405:
            description: "Invalid input"
        security:
        - authorization: []
    delete:
      tags:
      - "project"
      summary: "Deletes a project"
      operationId: "deleteProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Project id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Project not found"
      security:
      - authorization: []
  /team:
    post:
      tags:
      - "team"
      summary: "Add a new team"
      description: ""
      operationId: "addTeam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Teeam object that needs to be added to the PSAS"
        required: true
        schema:
          $ref: "#/definitions/team"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
      - authorization: []
    get:
      tags:
      - "team"
      summary: "Find all teams from user"
      operationId: "findTeamsFromUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/team"
        400:
          description: "Invalid status value"
      security:
      - authorization: []
  /team/findByProjectId/{projectId}:
    get:
      tags:
      - "team"
      summary: "Find teams by project id"
      description: "Returns all teams from a project"
      operationId: "findTeamsByProjectId"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "Id of project to find teams"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/team"
        400:
          description: "Invalid id supplied"
        404:
          description: "Project not found"
      security:
      - authorization: []
  /team/{teamId}:
    get:
      tags:
      - "team"
      summary: "Find team by Id"
      description: "Returns a single team"
      operationId: "findTeamById"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Id of team to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/team"
        400:
          description: "Invalid id supplied"
        404:
          description: "Team not found"
      security:
      - authorization: []
    put:
        tags:
        - "team"
        summary: "Updates a team"
        description: ""
        operationId: "updateTeam"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "teamId"
          in: "path"
          description: "Id of team to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/team"
        responses:
          405:
            description: "Invalid input"
        security:
        - authorization: []
    delete:
      tags:
      - "team"
      summary: "Deletes a team"
      operationId: "deleteTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Team id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Team not found"
      security:
      - authorization: []
  /assessment:
    post:
      tags:
      - "assessment"
      summary: "Add a new assessment"
      description: ""
      operationId: "addAssessment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Assessment object that needs to be added to the PSAS"
        required: true
        schema:
          $ref: "#/definitions/assessment"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
      - authorization: []
    get:
      tags:
      - "assessment"
      summary: "Find all assessments from user"
      operationId: "findAssessmentsFromUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/assessment"
        400:
          description: "Invalid status value"
      security:
      - authorization: []
  /assessment/{assessmentId}:
    get:
      tags:
      - "assessment"
      summary: "Find assessment by Id"
      description: "Returns a single assessment"
      operationId: "findAssessmentById"
      produces:
      - "application/json"
      parameters:
      - name: "assessmentId"
        in: "path"
        description: "Id of assessment to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/assessment"
        400:
          description: "Invalid id supplied"
        404:
          description: "Assessment not found"
      security:
      - authorization: []
    put:
        tags:
        - "assessment"
        summary: "Updates an assessment"
        operationId: "updateAssessment"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "assessmentId"
          in: "path"
          description: "Id of assessment to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/assessment"
        responses:
          405:
            description: "Invalid input"
        security:
        - authorization: []
    delete:
      tags:
      - "assessment"
      summary: "Deletes an assessment"
      operationId: "deleteAssessment"
      produces:
      - "application/json"
      parameters:
      - name: "assessmentId"
        in: "path"
        description: "Assessment id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Assessment not found"
      security:
      - authorization: []
  /assessment/findAllPublic:
    get:
      tags:
      - "assessment"
      summary: "Find all public assessments"
      description: "Returns all public assessments from every organization in PSAS"
      operationId: "findAllPublicAssessments"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/assessment"
        404:
          description: "No assessments found"
      security:
      - authorization: []
  /assessment/findByCompetence/{competence}:
    get:
      tags:
      - "assessment"
      summary: "Find all assessments by competence"
      description: "Returns all assessments from organization that have a specific competence"
      operationId: "findByCompetence"
      produces:
      - "application/json"
      parameters:
      - name: "competence"
        in: "path"
        description: "Competence name to be used in search query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/assessment"
        404:
          description: "No assessments found"
      security:
      - authorization: []
  /application:
    post:
      tags:
      - "application"
      summary: "Add a new application"
      description: ""
      operationId: "addApplication"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the application"
        required: true
        type: "string"
      - name: "teamId"
        in: "formData"
        description: "Id of the team where the assessment will be applied"
        required: true
        type: "string"
      - name: "assessmentId"
        in: "formData"
        description: "Id of the assessment"
        required: true
        type: "string"
      - name: "type"
        in: "formData"
        description: "Type of the application"
        required: true
        type: "string"
        enum:
        - "initial"
        - "summative"
        - "formative"
      - name: "method"
        in: "formData"
        description: "Method of the application"
        required: true
        type: "string"
        enum:
        - "ranking"
        - "nomination"
        - "classification"
      - name: "strategy"
        in: "formData"
        description: "Strategy of the application"
        required: true
        type: "string"
        enum:
        - "self"
        - "co"
        - "360"
      responses:
        200:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
      - authorization: []
    get:
      tags:
      - "application"
      summary: "Find all applications from user"
      operationId: "findApplicationFromUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/application"
        400:
          description: "Invalid status value"
      security:
      - authorization: []
  /application/changeStatus/{applicationId}:
    get:
      tags:
      - "application"
      summary: "Change status of an application"
      operationId: "changeStatusOfApplication"
      produces:
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "Id of application to change status"
        required: true
        type: "string"
      - in: "body"
        name: "status"
        description: "New status of the application"
        required: true
        schema:
          type: "string"
          enum:
          - "active"
          - "inactive"
          - "deleted"
          
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid id supplied"
        404:
          description: "Project not found"
      security:
      - authorization: []
  /application/{applicationId}:
    get:
      tags:
      - "application"
      summary: "Find application by Id"
      description: "Returns a single application"
      operationId: "findApplicationById"
      produces:
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "Id of application to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/application"
        400:
          description: "Invalid id supplied"
        404:
          description: "Team not found"
      security:
      - authorization: []
    put:
        tags:
        - "application"
        summary: "Updates an application"
        description: ""
        operationId: "updateApplication"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "applicationId"
          in: "path"
          description: "Id of application to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/application"
        responses:
          405:
            description: "Invalid input"
        security:
        - authorization: []
    delete:
      tags:
      - "application"
      summary: "Deletes an application"
      operationId: "deleteApplication"
      produces:
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "Application id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Application not found"
      security:
      - authorization: []
securityDefinitions:
  authorization:
    type: "apiKey"
    name: "authorization"
    in: "header"
definitions:
  user:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      language:
        type: "string"
        enum:
        - "pt-BR"
        - "en-US"
        - "es-ES"
      profile:
        type: "string"
        enum:
        - "organizationManager"
        - "organizationMember"
        - "projectManager"
        - "teamManager"
      status:
        type: "string"
        enum:
        - "active"
        - "inactive"
        - "deleted"
  competence:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "knowledge"
        - "ability"
        - "attitude"
      description:
        type: "string"
  organization:
    type: "object"
    required:
    - "name"
    properties:
      _id:
        type: "string"
        readOnly: true
      _rev:
        type: "string"
        readOnly: true
      name:
        type: "string"
        example: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/user"
      competences:
        type: "array"
        items:
          $ref: "#/definitions/competence"
      status:
        type: "string"
        description: "Organization status"
        enum:
        - "active"
        - "inactive"
        - "deleted"
  project:
    type: "object"
    required:
    - "name"
    - "organizationId"
    properties:
      _id:
        type: "string"
        readOnly: true
      _rev:
        type: "string"
        readOnly: true
      name:
        type: "string"
        example: "string"
      organizationId:
        type: "string"
      status:
        type: "string"
        description: "Project status"
        enum:
        - "active"
        - "inactive"
        - "deleted"
  team:
    type: "object"
    required:
    - "name"
    - "projectId"
    properties:
      _id:
        type: "string"
        readOnly: true
      _rev:
        type: "string"
        readOnly: true
      name:
        type: "string"
      projectId:
        type: "string"
      members:
        type: "array"
        items:
          $ref: "#/definitions/teamMember"
      status:
        type: "string"
        enum:
        - "active"
        - "inactive"
        - "deleted"
  teamMember:
    type: "object"
    required:
    - "email"
    - "profile"
    properties:
      email:
        type: "string"
      status:
        type: "string"
        enum:
        - "active"
        - "inactive"
        - "deleted"
  assessment:
    type: "object"
    required:
    - "name"
    - "organizationId"
    - "userCreator"
    - "public"
    - "tool"
    properties:
      _id:
        type: "string"
        readOnly: true
      _rev:
        type: "string"
        readOnly: true
      name:
        type: "string"
      organizationId:
        type: "string"
      userCreator:
        type: "string"
      public:
        type: "boolean"
      tool:
        type: "string"
        enum:
        - "rubric"
        - "questionnaire"
      status:
        type: "string"
        enum:
        - "active"
        - "inactive"
        - "deleted"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/question"
  question:
    type: "object"
    required:
    - "order"
    - "name"
    - "description"
    - "competences"
    - "significance"
    - "items"
    properties:
      order:
        type: "number"
      name:
        type: "string"
      description:
        type: "string"
      competences:
        type: "array"
        items:
          $ref: "#/definitions/competence"
      significance:
        type: "number"
      items:
        type: "array"
        items:
          $ref: "#/definitions/questionItem"
  questionItem:
    type: "object"
    required:
    - "order"
    - "description"
    - "option"
    - "percentage"
    properties:
      order:
        type: "number"
      description:
        type: "string"
      option:
        type: "string"
      percentage:
        type: "number"
  answer:
    type: "object"
    required:
    - "userEvaluator"
    - "userRated"
    - "answer"
    - "comments"
    properties:
      userEvaluator:
        type: "string"
      userRated:
        type: "string"
      answer:
        type: "string"
      comments:
        type: "string"
  application:
    type: "object"
    required:
    - "teamId"
    - "teamRev"
    - "assessmentId"
    - "assessmentRev"
    - "type"
    - "method"
    - "strategy"
    properties:
      _id:
        type: "string"
        readOnly: true
      _rev:
        type: "string"
        readOnly: true
      team:
        $ref: "#/definitions/team"
      assessment:
        $ref: "#/definitions/assessment"
      type:
        type: "string"
        enum:
        - "initial"
        - "summative"
        - "formative"
      method:
        type: "string"
        enum:
        - "ranking"
        - "nomination"
        - "classification"
      strategy:
        type: "string"
        enum:
        - "self"
        - "co"
        - "360"
      status:
        type: "string"
        enum:
        - "active"
        - "inactive"
        - "deleted"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/answer"